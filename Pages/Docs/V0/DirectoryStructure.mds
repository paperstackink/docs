---
layout: Content
group: Getting started
title: Directory structure
order: 3
---

# Directory structure

All Paperstack projects have the same structure.

## The Pages directory

The `Pages` directory is the source directory for all pages. It contains `.stencil` and `.mds` files that each represent a single page. These files are compiled into `.html` files.

You can nest pages inside subdirectories. The name of each subdirectory is added to the URL of the page.


| Source file                                  | Path                            |
| -------------------------------------------- | ------------------------------- |
| `Pages/Index.stencil`                        | `/`                             |
| `Pages/About.stencil`                        | `/about`                        |
| `Pages/Articles/Index.stencil`               | `/articles`                     |
| `Pages/Articles/Planning.stencil`            | `/articles/planning`            |
| `Pages/Articles/January/Resolutions.stencil` | `/articles/january/resolutions` |


## The Output directory

The `Output` directory contains your generated website. It contains all `.html` files generated from `Pages` and is used when [deploying] your website.

It’s automatically generated by running the dev server or by building your website.

> All files in `Output` are deleted if you change a file when you have `npm run dev` running or when you run `npm run build` .   You can edit the files when debugging, but permanent changes should be made to the source file. 


## The Components directory

The `Components` directory contains all your [re-usable HTML elements](/docs/v0/components).

Each component is a `.stencil` file and the file name determines the name of the component when using it.

`Components/Button.stencil` is available as `Button`:

```
<Button>
	Click me
</Button>
```

All components are available everywhere without needing to be imported.

You can move components into subdirectories, but this won’t have any effect on how the component is used. The purpose of nesting components in subdirectories is solely for organisation.

> All component names must be unique across your project, since components are automatically imported. 
> You can’t have a `Component/Dark/Button.stencil` component and a `Component/Light/Button.stencil` component in the same project. 


## The Assets directory

The `Assets` directory contains static resources like fonts, icons, images and other files like a sitemap.

All files are copied into `Output` when building the site.

`Assets` can contain subdirectories. All subdirectories will be preserved when building the site.

| Source file              | Path               |
| ------------------------ | ------------------ |
| `Assets/sitemap.txt`     | `/sitemap.txt`     |
| `Assets/images/hero.png` | `/images/hero.png` |